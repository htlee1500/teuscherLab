import plotsrc
import matplotlib.pyplot as plot

import numpy as np
import math

# code for getting data on voltage trace approximations
def main():

    
    alpha = 0.15
    max_bound = 1000
    deviation = 0.001

    data = list()
    percents = list()
    calculated = list()
    bounds = np.arange(17, max_bound, 1)
            

    """
    for bound in range(17, max_bound, 1):

        K = limit_approx(alpha, bound, deviation)
        data.append(bound - K)
        #slope = K / bound
        #slope = math.floor(slope * 100) / 100
        #percents.append(slope)
        #log = math.log(float(bound) / 20, 2)
        #print(log)
        #estimated = ((0.5**(math.ceil(log)) * 0.8)) * bound
        #print(estimated*bound)
        #calculated.append(estimated)
        print("For N = " + str(bound) + "; K = " + str(K)+ "; Difference: " + str(bound - K)) #+ ". Slope: " + str(slope))

    
    plot.plot(bounds, data, label = "actual")
    plot.plot(bounds, calculated, label = "est. bounds")
    plot.legend()
    plot.show()
    """
    difference, quotient = sum_differential(alpha, max_bound)
    inputs = np.arange(max_bound - 3)
    plot.plot(inputs, difference, label = "Difference")
    plot.plot(inputs, quotient, label = "Quotient")
    plot.legend()
    plot.show()

# Determines, for a given bound and alpha, the greatest K for which
# the ratio between terms is squeezed by [deviation]
def limit_approx(alpha, bound, deviation):
    K = 0

    # Trace is calculated for 0 <= k <= bound-2
    for k in range(bound-1):
        tempk = float(k)
        n_plus_one_th = (bound - tempk + 1)**(1-alpha) - (bound - tempk)**(1-alpha)
        n_th = (bound - tempk)**(1-alpha) - (bound - tempk - 1)**(1-alpha)

        #ratio = n_th / n_plus_one_th
        #diff = ratio - 1

        diff = abs(n_th - n_plus_one_th)

        if diff <= deviation:
            K = k
        else:
            break


    return K
        
    

def sum_differential(alpha, N):
    
    difference = list()
    quotient = list()

    for i in range(1, N-2):
        
        nth = i**(1-alpha) + (i+2)**(1-alpha)
        n_plus_one_th = (i+1)**(1-alpha) + (i+3)**(1-alpha)

        diff = n_plus_one_th - nth
        quot = n_plus_one_th / nth

        difference.append(diff)
        quotient.append(quot)
    
    return difference, quotient


if __name__ == "__main__":
    main()
